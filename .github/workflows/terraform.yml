name: Terraform CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform-plan:
    if: github.event_name != 'workflow_dispatch' # Only run on push or PR
    environment : ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    runs-on: ubuntu-latest
    outputs:
      plan-exitcode: ${{ steps.tf-plan.outputs.exitcode }}
    env:
      TF_VAR_env: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: "true"
      ARM_SKIP_PROVIDER_REGISTRATION: "true"

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="key=shareapp-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: tf-plan
        run: |
          exitcode=0
          terraform plan -detailed-exitcode -no-color -out=tfplan -var="env=${TF_VAR_env}" || exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan FAILED"
            exit 1
          fi

      - name: Save Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.ref_name }}
          path: tfplan
          retention-days: 7

      - name: Create Plan String
        id: planstring
        run: |
          PLAN_CONTENT=$(terraform show -no-color tfplan)

          # Use a random delimiter so we don't prematurely close the output
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$PLAN_CONTENT" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
  
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Post Plan to PR (if PR event)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = process.env.SUMMARY;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  terraform-apply:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Only run manually
    environment : ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      TF_VAR_env: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: "true"
      ARM_SKIP_PROVIDER_REGISTRATION: "true"

    steps:
      - name: (Manual Approval Required) Wait for Approval
        run: echo "Waiting for environment approval..."

      - name: Check out code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Download Terraform Plan from Last Successful Run
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.ref_name }}

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="key=shareapp-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}.tfstate"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan